

public class genericLinklist<T>{
	private class Node {
		T data;
		Node next;
	}

	private Node head = null;
	private Node tail = null;
	private int size = 0;

	public void Display() {
		Node temp = this.head;
		while (temp != null) {
			System.out.print(temp.data + " ");
			temp = temp.next;
		}
	}

	public void addLast(T val) {

		Node newNode = new Node();
		newNode.data = val;
		newNode.next = null;
		if (this.size == 0) {
			this.head = newNode;
			this.tail = newNode;
			this.size++;

		} else {
			Node temp = head;
			while (temp.next != null)
				temp = temp.next;
			temp.next = newNode;
			this.tail = newNode;
			this.size++;

		}

	}

	public void addFast(T val) {

		Node newNode = new Node();
		newNode.data = val;
		newNode.next = null;
		if (this.size == 0) {
			this.head = newNode;
			this.tail = newNode;
			this.size++;
		} else {
			newNode.next = this.head;
			this.head = newNode;
			this.size++;

		}

	}

	public T getFirst() throws Exception {
		if (this.size == 0)
			throw new Exception("Linked list is empty.");
		return this.head.data;
	}

	public T getLast() throws Exception {
		if (this.size == 0)
			throw new Exception("link list is empty.");
		return this.tail.data;
	}

	public T getAt(int index) throws Exception {
		if (this.size == 0)
			throw new Exception("link list is empty.");
		if (index < 0 || index >= this.size) {
			throw new Exception("Size is not valid");
		}
		Node temp = this.head;
		for (int i = 1; i <= index; i++)
			temp = temp.next;
		return temp.data;

	}

	private Node getNodeAt(int index) throws Exception {
		if (this.size == 0)
			throw new Exception("link list is empty.");
		if (index < 0 || index >= this.size) {
			throw new Exception("Size is not valid");
		}
		Node temp = this.head;
		for (int i = 1; i <= index; i++)
			temp = temp.next;
		return temp;

	}
	
	public int find(T data) {
		int index=0;
		Node temp=head;
		
		while(temp!=null) {
			
			if(temp.data.equals(data)) {
				return index;
			}
			index++;
			temp=temp.next;
		}
		
		return -1;
	}

	public static void main(String[] args) {
		heap.remove();
	}

}
